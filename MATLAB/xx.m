%% extract data from plot
%h = findobj(gca,'Type','line') %h = findobj(gca,'Type','scatter')
h=findobj(gca,'Marker','s')
xp1=get(h,'Xdata')'
yp1=get(h,'Ydata')'
yerr=get(h,'YNegativeDelta')'

xp1{1}' % 1st plot x line in array
yp1{1}'
xp1{2}' % 2nd plot x line in array
x{3}
%%
x = linspace(0,1,20)';
y = sin(x);
dy = .1*(1+rand(size(y))).*y;  % made-up error values
figure
fill([x;flipud(x)],[y-dy;flipud(y+dy)],[.9 .9 .9],'linestyle','none');
line(x,y)
%%
figure
h = zeros(1,3);
h(1) = plot([1:10],'Color','r','DisplayName','This one');hold on;
h(2) = plot([1:2:10],'Color','b','DisplayName','This two');
h(3) = plot([1:3:10],'Color','k','DisplayName','This three'); hold off;
legend(h(2:3)); % Only display last two legend titles
%% Import data from text file.
% Script for importing data from the following text file:
%
%    D:\CERNbox\QPR tests & Operation\2019-12-16 QPR Cooldown #18 ARIES-QPR-HZB-B5.4 (3µm Nb on Cu from STFC)\diagnistics file\2020-01-07 18_10_13.txt
%
% To extend the code to different selected data or a different text file,
% generate a function instead of a script.

% Auto-generated by MATLAB on 2020/01/12 19:28:52

%% Initialize variables.
filename = 'D:\CERNbox\QPR tests & Operation\2019-12-16 QPR Cooldown #18 ARIES-QPR-HZB-B5.4 (3µm Nb on Cu from STFC)\diagnistics file\2020-01-07 18_10_13.txt';
delimiter = '\t';

%% Read columns of data as text:
% For more information, see the TEXTSCAN documentation.
formatSpec = '%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%[^\n\r]';

%% Open the text file.
fileID = fopen(filename,'r');

%% Read columns of data according to the format.
% This call is based on the structure of the file used to generate this
% code. If an error occurs for a different file, try regenerating the code
% from the Import Tool.
dataArray = textscan(fileID, formatSpec, 'Delimiter', delimiter, 'TextType', 'string',  'ReturnOnError', false);

%% Close the text file.
fclose(fileID);

%% Convert the contents of columns containing numeric text to numbers.
% Replace non-numeric text with NaN.
raw = repmat({''},length(dataArray{1}),length(dataArray)-1);
for col=1:length(dataArray)-1
    raw(1:length(dataArray{col}),col) = mat2cell(dataArray{col}, ones(length(dataArray{col}), 1));
end
numericData = NaN(size(dataArray{1},1),size(dataArray,2));

for col=[3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28]
    % Converts text in the input cell array to numbers. Replaced non-numeric
    % text with NaN.
    rawData = dataArray{col};
    for row=1:size(rawData, 1)
        % Create a regular expression to detect and remove non-numeric prefixes and
        % suffixes.
        regexstr = '(?<prefix>.*?)(?<numbers>([-]*(\d+[\,]*)+[\.]{0,1}\d*[eEdD]{0,1}[-+]*\d*[i]{0,1})|([-]*(\d+[\,]*)*[\.]{1,1}\d+[eEdD]{0,1}[-+]*\d*[i]{0,1}))(?<suffix>.*)';
        try
            result = regexp(rawData(row), regexstr, 'names');
            numbers = result.numbers;
            
            % Detected commas in non-thousand locations.
            invalidThousandsSeparator = false;
            if numbers.contains(',')
                thousandsRegExp = '^\d+?(\,\d{3})*\.{0,1}\d*$';
                if isempty(regexp(numbers, thousandsRegExp, 'once'))
                    numbers = NaN;
                    invalidThousandsSeparator = true;
                end
            end
            % Convert numeric text to numbers.
            if ~invalidThousandsSeparator
                numbers = textscan(char(strrep(numbers, ',', '')), '%f');
                numericData(row, col) = numbers{1};
                raw{row, col} = numbers{1};
            end
        catch
            raw{row, col} = rawData{row};
        end
    end
end

% Convert the contents of columns with dates to MATLAB datetimes using the
% specified date format.
try
    dates{2} = datetime(dataArray{2}, 'Format', 'HH:mm:ss', 'InputFormat', 'HH:mm:ss');
catch
    try
        % Handle dates surrounded by quotes
        dataArray{2} = cellfun(@(x) x(2:end-1), dataArray{2}, 'UniformOutput', false);
        dates{2} = datetime(dataArray{2}, 'Format', 'HH:mm:ss', 'InputFormat', 'HH:mm:ss');
    catch
        dates{2} = repmat(datetime([NaN NaN NaN]), size(dataArray{2}));
    end
end

dates = dates(:,2);

%% Split data into numeric and string columns.
rawNumericColumns = raw(:, [3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28]);
rawStringColumns = string(raw(:, 1));


%% Replace non-numeric cells with NaN
R = cellfun(@(x) ~isnumeric(x) && ~islogical(x),rawNumericColumns); % Find non-numeric cells
rawNumericColumns(R) = {NaN}; % Replace non-numeric cells

%% Make sure any text containing <undefined> is properly converted to an <undefined> categorical
idx = (rawStringColumns(:, 1) == "<undefined>");
rawStringColumns(idx, 1) = "";

%% Create output variable
Untitled = table;
Untitled.Date = categorical(rawStringColumns(:, 1));
Untitled.Time = dates{:, 1};
Untitled.X40131LS336InputA = cell2mat(rawNumericColumns(:, 1));
Untitled.X50122LS336InputC = cell2mat(rawNumericColumns(:, 2));
Untitled.VTSHeliumlevel4LI1200 = cell2mat(rawNumericColumns(:, 3));
Untitled.VTSHeliumdruckfein4PI1200 = cell2mat(rawNumericColumns(:, 4));
Untitled.VTSHeliumdruckgrob4PI1210 = cell2mat(rawNumericColumns(:, 5));
Untitled.Heizerspannung = cell2mat(rawNumericColumns(:, 6));
Untitled.SpannungSpule = cell2mat(rawNumericColumns(:, 7));
Untitled.Magnetfeldsonde = cell2mat(rawNumericColumns(:, 8));
Untitled.VTSHeizerSpannung = cell2mat(rawNumericColumns(:, 9));
Untitled.VTSHeizerStrom = cell2mat(rawNumericColumns(:, 10));
Untitled.VTSHeizerLeistung = cell2mat(rawNumericColumns(:, 11));
Untitled.HoBiCaTPSIStatus = cell2mat(rawNumericColumns(:, 12));
Untitled.TempCCS576Fuehrungsgroesse = cell2mat(rawNumericColumns(:, 13));
Untitled.TempX44184Kryostatunten = cell2mat(rawNumericColumns(:, 14));
Untitled.TempX44179KryostatMitte = cell2mat(rawNumericColumns(:, 15));
Untitled.TempPT100Pos1 = cell2mat(rawNumericColumns(:, 16));
Untitled.TempPT100Pos2 = cell2mat(rawNumericColumns(:, 17));
Untitled.TempPT100HeizerBoden = cell2mat(rawNumericColumns(:, 18));
Untitled.TempX50129upperplate = cell2mat(rawNumericColumns(:, 19));
Untitled.TempX59092cavitytop = cell2mat(rawNumericColumns(:, 20));
Untitled.TempX107762B1unten = cell2mat(rawNumericColumns(:, 21));
Untitled.VacInsulationvacuumFV = cell2mat(rawNumericColumns(:, 22));
Untitled.VacInsulationvacuumUHV = cell2mat(rawNumericColumns(:, 23));
Untitled.VacHeliumbathOring = cell2mat(rawNumericColumns(:, 24));
Untitled.VacCavityUHV = cell2mat(rawNumericColumns(:, 25));
Untitled.VacThermometriechamberUHV = cell2mat(rawNumericColumns(:, 26));

% For code requiring serial dates (datenum) instead of datetime, uncomment
% the following line(s) below to return the imported dates as datenum(s).

% Untitled.Time=datenum(Untitled.Time);

%% Clear temporary variables
clearvars filename delimiter formatSpec fileID dataArray ans raw col numericData rawData row regexstr result numbers invalidThousandsSeparator thousandsRegExp dates blankDates anyBlankDates invalidDates anyInvalidDates rawNumericColumns rawStringColumns R idx;